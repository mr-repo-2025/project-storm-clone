{"version":3,"file":"DeleteItemsAction.js","sourceRoot":"","sources":["../../src/actions/DeleteItemsAction.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAe,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAExE,OAAO,QAAQ,MAAM,gBAAgB,CAAC;AACtC,OAAO,QAAQ,MAAM,gBAAgB,CAAC;AAYtC;;GAEG;AACH,MAAM,OAAO,iBAAkB,SAAQ,MAAM;IACzC,YAAY,UAAoC,EAAE;QAC9C,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC7C,MAAM,SAAS,mBACX,OAAO,EAAE,KAAK,EACd,QAAQ,EAAE,KAAK,EACf,MAAM,EAAE,KAAK,EACb,OAAO,EAAE,KAAK,IACX,OAAO,CAAC,SAAS,CACvB,CAAC;QAEF,KAAK,CAAC;YACF,IAAI,EAAE,SAAS,CAAC,QAAQ;YACxB,IAAI,EAAE,CAAC,KAAiC,EAAE,EAAE;gBACxC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;gBAEpE,IAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,SAAS,CAAC,EAAE,CAAC;oBAClG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,mBAAmB,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE;wBAC7D,yCAAyC;wBACzC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC;4BACpB,KAAK,CAAC,MAAM,EAAE,CAAC;wBACnB,CAAC;oBACL,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;gBAChC,CAAC;YACL,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;CACJ","sourcesContent":["import { Action, ActionEvent, InputType } from '../core-actions/Action';\r\nimport { KeyboardEvent } from 'react';\r\nimport _forEach from 'lodash/forEach';\r\nimport _isEqual from 'lodash/isEqual';\r\n\r\nexport interface DeleteItemsActionOptions {\r\n    keyCodes?: number[];\r\n    modifiers?: {\r\n        ctrlKey?: boolean;\r\n        shiftKey?: boolean;\r\n        altKey?: boolean;\r\n        metaKey?: boolean;\r\n    };\r\n}\r\n\r\n/**\r\n * Deletes all selected items\r\n */\r\nexport class DeleteItemsAction extends Action {\r\n    constructor(options: DeleteItemsActionOptions = {}) {\r\n        const keyCodes = options.keyCodes || [46, 8];\r\n        const modifiers = {\r\n            ctrlKey: false,\r\n            shiftKey: false,\r\n            altKey: false,\r\n            metaKey: false,\r\n            ...options.modifiers\r\n        };\r\n\r\n        super({\r\n            type: InputType.KEY_DOWN,\r\n            fire: (event: ActionEvent<KeyboardEvent>) => {\r\n                const { keyCode, ctrlKey, shiftKey, altKey, metaKey } = event.event;\r\n\r\n                if (keyCodes.indexOf(keyCode) !== -1 && _isEqual({ ctrlKey, shiftKey, altKey, metaKey }, modifiers)) {\r\n                    _forEach(this.engine.getModel().getSelectedEntities(), (model) => {\r\n                        // only delete items which are not locked\r\n                        if (!model.isLocked()) {\r\n                            model.remove();\r\n                        }\r\n                    });\r\n                    this.engine.repaintCanvas();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}"]}
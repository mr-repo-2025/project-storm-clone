{"version":3,"file":"DragNewLinkState.js","sourceRoot":"","sources":["../../src/states/DragNewLinkState.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tAbstractDisplacementState,\r\n\tAbstractDisplacementStateEvent,\r\n\tAction,\r\n\tActionEvent,\r\n\tInputType\r\n} from '@projectstorm/react-canvas-core';\r\nimport { PortModel } from '../entities/port/PortModel';\r\nimport { MouseEvent } from 'react';\r\nimport { LinkModel } from '../entities/link/LinkModel';\r\nimport { DiagramEngine } from '../DiagramEngine';\r\n\r\nexport interface DragNewLinkStateOptions {\r\n\t/**\r\n\t * If enabled, the links will stay on the canvas if they dont connect to a port\r\n\t * when dragging finishes\r\n\t */\r\n\tallowLooseLinks?: boolean;\r\n\t/**\r\n\t * If enabled, then a link can still be drawn from the port even if it is locked\r\n\t */\r\n\tallowLinksFromLockedPorts?: boolean;\r\n}\r\n\r\nexport class DragNewLinkState<E extends DiagramEngine = DiagramEngine> extends AbstractDisplacementState<E> {\r\n\tport: PortModel;\r\n\tlink: LinkModel;\r\n\tconfig: DragNewLinkStateOptions;\r\n\r\n\tconstructor(options: DragNewLinkStateOptions = {}) {\r\n\t\tsuper({ name: 'drag-new-link' });\r\n\r\n\t\tthis.config = {\r\n\t\t\tallowLooseLinks: true,\r\n\t\t\tallowLinksFromLockedPorts: false,\r\n\t\t\t...options\r\n\t\t};\r\n\r\n\t\tthis.registerAction(\r\n\t\t\tnew Action({\r\n\t\t\t\ttype: InputType.MOUSE_DOWN,\r\n\t\t\t\tfire: (event: ActionEvent<MouseEvent, PortModel>) => {\r\n\t\t\t\t\tthis.port = this.engine.getMouseElement(event.event) as PortModel;\r\n\t\t\t\t\tif (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\r\n\t\t\t\t\t\tthis.eject();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.link = this.port.createLinkModel();\r\n\r\n\t\t\t\t\t// if no link is given, just eject the state\r\n\t\t\t\t\tif (!this.link) {\r\n\t\t\t\t\t\tthis.eject();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.link.setSelected(true);\r\n\t\t\t\t\tthis.link.setSourcePort(this.port);\r\n\t\t\t\t\tconsole.log('this.port',this.port);\r\n\t\t\t\t\tconsole.log('this.this.engine.getMouseElement(event.event)',this.engine.getMouseElement(event.event));\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.engine.getModel().addLink(this.link);\r\n\t\t\t\t\tthis.port.reportPosition();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tthis.registerAction(\r\n\t\t\tnew Action({\r\n\t\t\t\ttype: InputType.MOUSE_UP,\r\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\r\n\t\t\t\t\tconst model = this.engine.getMouseElement(event.event);\r\n\t\t\t\t\t// check to see if we connected to a new port\r\n\t\t\t\t\tif (model instanceof PortModel) {\r\n\t\t\t\t\t\tif (this.port.canLinkToPort(model)) {\r\n\t\t\t\t\t\t\tthis.link.setTargetPort(model);\r\n\t\t\t\t\t\t\tmodel.reportPosition();\r\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.link.remove();\r\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!this.config.allowLooseLinks) {\r\n\t\t\t\t\t\tthis.link.remove();\r\n\t\t\t\t\t\tthis.engine.repaintCanvas();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the link's far-end point position on mouse move.\r\n\t * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\r\n\t * as the possible engine offset\r\n\t */\r\n\tfireMouseMoved(event: AbstractDisplacementStateEvent): any {\r\n\r\n\t\tthis.port.reportPosition();\r\n\t\tconsole.log('this.port.getPosition()',this.port.getPosition());\r\n\t\t\r\n\t\tconst portPos = this.port.getPosition();\r\n\t\tconst zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\r\n\t\tconst engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\r\n\t\tconst engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\r\n\t\tconst initialXRelative = this.initialXRelative / zoomLevelPercentage;\r\n\t\tconst initialYRelative = this.initialYRelative / zoomLevelPercentage;\r\n\t\tconst linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\r\n\t\tconst linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\r\n\r\n\t\tthis.link.getLastPoint().setPosition(linkNextX, linkNextY);\r\n\t\tthis.engine.repaintCanvas();\r\n\t}\r\n}\r\n"]}